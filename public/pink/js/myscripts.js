jQuery(document).ready(function ($) {//как только страница будет полностью загружена, выполнится код данной функции
    
    $('.commentlist li').each(function (i) { //позволяет описать функцию, которая будет выполнена для каждого элемента выборки
                                            //i - индекс элемента, для которого вызывается функция в наборе
                                            //позволяет выбрать все элементы li, которые располагаются в блоке commentlist 
        $(this).find('div.commentNumber').text('#' + (i + 1));
        //this - конкретный коммент, для которого вызвана данная функция
        //find('div.commentNumber') - поиск дива, в котором располагается номер коммента по фаербагу
        //text - текстовое содержимое, # - как в самом макете нарисована #, (i + 1) потому как индексация начинается с 0
    }); //это мы пронумеровали комменты для каждой данной статьи

    //для кнопки submit в форме оптсать функцию обработчик события клик,выберем при помощи идентификатора #commentform всю форму в целом
    $('#commentform').on('click', '#submit', function (e) {//(e) объект текущего события
        e.preventDefault();//отменит стандартную форму поведения для кнопки отправки формы

        var comParent = $(this); //кнопка, по которой щелкнули

        $('.wrap_result').css('color', 'green').//wrap_result - указывает пользователю на выполняемое действие
            text('Сохранения комментария').
            fadeIn(500, function () {

                var data = $('#commentform').serializeArray();//получаем доступ к выбранной форме,
                    //serializeArray возвращаетсодержимое формы в виде массива
                //alert(data);

                $.ajax({

                    url: $('#commentform').attr('action'),//attr('action') - получаем доступ к атрибуту action выбранного элемента из article_content.blade    "commentform"
                    data: data,
                    headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') }, //скопировали с руководства ларавэл раздела Routing
                    type: 'POST',//формат отправки данных
                    datatype: 'JSON',//желаемый формат отправляемых(возвращаемых) данных

                    success: function (html) {//успешный ajax  запрос к серверу, html - ответ от сервера, при этом данные, которые возвращаются от сервера - это данные формата json, а значит они автоматически декодируются в объект, поэтому в переменной html располагается объект
                        if (html.error) {
                            $('wrap_result').css('color', 'red').append('<br /><strong>Ошибка: </strong>' + html.error.join('<br/>'));
                            //Метод join() объединяет все элементы массива (или массивоподобного объекта) в строку. Строка 72 CommentController
                            $('wrap_result').delay(2000).fadeOut(500);
                        }

                        else if (html.success) {
                            
                            $('.wrap_result')//блок проверяет - является ли коммент ответом на определенный ранее добавленный коммент
                                .append('<br/><strong>Сохранено!</strong')//добавит в wrap_result Сохранено!
                                .delay(2000)//задержать на экране данную надпись
                                .fadeOut(500, function () {//скрыть блок wrap_result, используя плавное изменени прозрачности и потом функция, которая выполнится после завершения анимации
                                    
                                    if (html.data.parent_id > 0) {
                                        
                                        comParent.parents('div#respond').prev().after('<ul class="children">' + html.comment + '</ul>');
                                        //.parents найдем родителей данной кнопки, по сути нашу форму
                                        //prev() - перемещение по дереву dom вверх
                                        //after после указанного дива отобразим коммент, добавленный в бд
                                        //html.comment готовый коммент для отображения на экран
                                    }

                                    else {//пользователь добавляет родительский коммент, не являющийся ответом, также данный блок сработает, когда в данной записи нет комментов и пользователь добавляет первый коммент

                                        if ($.contains('#comments', 'ol.commentlist')) {  //добавление родит непервого коммента
                                            //а есть ли на странице блок с классом commentlist - 1 аргумет - блок, в котором ищем, 2-й арг - селектор элемента, который ищем в указанном блоке
                                            $('ol.commentlist').append(html.comment);
                                        }
                                        else { //добавление первого коммента для опред записи

                                            $('#respond').before('<ol class="commentlist group">' + html.comment + '</ol>');
                                            
                                            //before  позволяет добавить опред элемент непосредственно перед выбранным элементом
                                        }

                                    }
                                    $('#cancel-comment-reply-link').click();
                                        
                                    //click() без передаваемых аргументов -  имитация клика мышью по данному элементу по ссылке cancel reply
                                    
                                    
                                })
                        }
                        
                    },
                    error: function () {//ошибка не пользователя, а в работе скрипта или сервера

                        $('.wrap_result').css('color', 'red').append('<br/><strong>Ошибка: </strong>');
                        $('.wrap_result').delay(2000).fadeOut(500, function () {
                            $('#cancel-comment-reply-link').click();

                        });
                    }

                });
            
            });
    });
    //on - назначает обработчик события клик, 1 арг - имя интересующего события,
    //2 арг - элемент, для которого мы регистрируем событие, 3 арг- функция,которая выполнится при срабатывании события клик (мыши) 
    //е - объект текущего события, отменим стандартное поведение для кнопки отправки формы, используя метод prevent default
    //var comParent - выборка элемента, для которого в данный момент зарегистрирован обработчик события клик, то есть по сути кнопочка отправки формы, доступ получаем через this
    //fadeIn - для отображения элементов на экран, используя плавное изменение прозрачности,500 - это 500миллисекунд, то есть полсекунды
    //анонимная функция будет выполнена после завершения всех анимационных эффектов, 
    //и именно в коде данной функции мы и отправим данные, используя АСИНХРОННЫЙ ЗАПРОС ТИПА AJAX
});


